// HUMAN TORCH! - BASED ON FlameThrower by Ludwig

/* CVARS - copy and paste to shconfig.cfg

//Human Torch
htorch_level 0
htorch_armorcost 15		//How much amour each flame uses
htorch_numburns 5		//How many time to burn the victim
htorch_burndamage 10		//How much damage each burn does

*/

#include <superheromod>
#include <amxmisc>

// GLOBAL VARIABLES
new gHeroID;
new const gHeroName[] = "Human Torch";

new bool:gIsBurning[MAX_PLAYERS + 1];

new CvarArmorCost, CvarNumBurns, CvarBurnDamage;

new const gSoundBurning[] = "ambience/burning1.wav";
new const gSoundFlameBlast[] = "ambience/flameburst1.wav";
new const gSoundScream[] = "scientist/c1a0_sci_catscream.wav";
new gSpriteSmoke, gSpriteFire, gSpriteBurning;
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Human Torch", SH_VERSION_STR, "{HOJ} Batman/JTP10181");

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = create_cvar("htorch_level", "0", .has_min = true, .min_val = 0.0);
	bind_pcvar_num(create_cvar("htorch_armorcost", "15", .has_min = true, .min_val = 0.0), CvarArmorCost);
	bind_pcvar_num(create_cvar("htorch_numburns", "5", .has_min = true, .min_val = 0.0), CvarNumBurns);
	bind_pcvar_num(create_cvar("htorch_burndamage", "10", .has_min = true, .min_val = 0.0), CvarBurnDamage);

	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Flame Blast", "Ignite your enemies on fire with a Flame Blast");
	sh_set_hero_bind(gHeroID);
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_sound(gSoundBurning);
	precache_sound(gSoundFlameBlast);
	precache_sound(gSoundScream);
	gSpriteSmoke = precache_model("sprites/steam1.spr");
	gSpriteFire = precache_model("sprites/explode1.spr");
	gSpriteBurning = precache_model("sprites/xfire.spr");
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gIsBurning[id] = false;
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	gIsBurning[id] = false;

	@Task_StopFire(id);
}
//----------------------------------------------------------------------------------------------
public sh_hero_key(id, heroID, key)
{
	if (gHeroID != heroID || sh_is_freezetime() || !is_user_alive(id))
		return;

	if (key == SH_KEYDOWN) {
		// Ludwigs flame thrower
		if (pev(id, pev_waterlevel) == 3) {
			sh_chat_message(id, gHeroID, "You cannot use the Flame Blast while underwater");
			sh_sound_deny(id);
			return;
		}

		new armorCost = CvarArmorCost;

		if (armorCost > 0) {
			new CsArmorType:armorType;
			new userArmor = cs_get_user_armor(id, armorType);

			if (userArmor < armorCost) {
				sh_chat_message(id, gHeroID, "Flame Blasts cost %d armor point%s each", armorCost, armorCost == 1 ? "" : "s");
				sh_sound_deny(id);
				return;
			}

			cs_set_user_armor(id, userArmor - armorCost, armorType);
		}

		emit_sound(id, CHAN_WEAPON, gSoundFlameBlast, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);

		new Float:vec[3], aimVec[3], Float:fAimVec[3];
		pev(id, pev_origin, vec);
		get_user_origin(id, aimVec, Origin_AimEndClient);
		IVecFVec(aimVec, fAimVec);

		new Float:dist = get_distance_f(vec, fAimVec);
		new speed = 10;
		new speed1 = 160;
		new speed2 = 350;
		new radius = 105;

		switch (dist) {
			case 0..49: {
				radius = 0;
				speed = 5;
			}
			case 50..149: {
				speed1 = speed2 = 1;
				speed = 5;
				radius = 50;
			}
			case 150..199: {
				speed1 = speed2 = 1;
				speed = 5;
				radius = 90;
			}
			case 200..249: {
				speed1 = speed2 = 90;
				speed = 6;
				radius = 90;
			}
			case 250..299: {
				speed1 = speed2 = 140;
				speed = 7;
			}
			case 300..349: {
				speed1 = speed2 = 190;
				speed = 7;
			}
			case 350..399: {
				speed1 = 150;
				speed2 = 240;
				speed = 8;
			}
			case 400..449: {
				speed1 = 150;
				speed2 = 290;
				speed = 8;
			}
			case 450..499: {
				speed1 = 180;
				speed2 = 340;
				speed = 9;
			}
		}

		new Float:vecDif[3], Float:velocityVec[3], Float:length;

		vecDif[0] = fAimVec[0] - vec[0];
		vecDif[1] = fAimVec[1] - vec[1];
		vecDif[2] = fAimVec[2] - vec[2];

		length = vector_length(vecDif);

		// Make sure 0 is not returned so we don't divide by it
		if (length == 0)
			length++;

		velocityVec[0] = vecDif[0] * speed / length;
		velocityVec[1] = vecDif[1] * speed / length;
		velocityVec[2] = vecDif[2] * speed / length;

		new Float:args[6];
		args[0] = vec[0];
		args[1] = vec[1];
		args[2] = vec[2];
		args[3] = velocityVec[0];
		args[4] = velocityVec[1];
		args[5] = velocityVec[2];

		set_task_ex(0.1, "@Task_TESpray", 0, args, 6, SetTask_RepeatTimes, 2);

		check_burnzone(id, vec, vecDif, length, speed1, speed2, radius);
	}
}
//----------------------------------------------------------------------------------------------
@Task_TESpray(Float:args[])
{
	// Throws a shower of sprites or models
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_SPRAY); // 120
	write_coord_f(args[0]); // start pos
	write_coord_f(args[1])
	write_coord_f(args[2])
	write_coord_f(args[3]); // velocity
	write_coord_f(args[4])
	write_coord_f(args[5])
	write_short(gSpriteFire); // spr
	write_byte(8); // count
	write_byte(70); // speed
	write_byte(100); // noise
	write_byte(5); // rendermode
	message_end();
}
//----------------------------------------------------------------------------------------------
check_burnzone(id, Float:vec[], Float:vecDif[], Float:length, speed1, speed2, radius)
{
	if (!is_user_connected(id))
		return;

	new targetBody, targetID;
	get_user_aiming(id, targetID, targetBody, 550);

	new FFOn = sh_friendlyfire_on();
	new CsTeams:idTeam = cs_get_user_team(id);

	if (is_user_alive(targetID)) {
		if (FFOn)
			burn_victim(targetID, id);
		else if (idTeam != cs_get_user_team(targetID))
			burn_victim(targetID, id);
	}

	new Float:burnVec1[3], Float:burnVec2[3];

	burnVec1[0] = vecDif[0] * speed1 / length + vec[0];
	burnVec1[1] = vecDif[1] * speed1 / length + vec[1];
	burnVec1[2] = vecDif[2] * speed1 / length + vec[2];

	burnVec2[0] = vecDif[0] * speed2 / length + vec[0];
	burnVec2[1] = vecDif[1] * speed2 / length + vec[1];
	burnVec2[2] = vecDif[2] * speed2 / length + vec[2];

	new players[MAX_PLAYERS], playerCount, player;
	new Float:origin[3];
	get_players_ex(players, playerCount, GetPlayers_ExcludeDead | GetPlayers_ExcludeHLTV);

	for (new i = 0; i < playerCount; i++) {
		player = players[i];

		if (player != id && (idTeam != cs_get_user_team(player) || FFOn)) {
			pev(player, pev_origin, origin);

			if (get_distance_f(origin, burnVec1) < radius)
				burn_victim(player, id);
			else if (get_distance_f(origin, burnVec2) < radius)
				burn_victim(player, id);
		}
	}
}
//----------------------------------------------------------------------------------------------
burn_victim(victim, attacker)
{
	if (pev(victim, pev_waterlevel) == 3 || gIsBurning[victim])
		return;

	gIsBurning[victim] = true;

	emit_sound(victim, CHAN_ITEM, gSoundBurning, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);

	new args[2];
	args[0] = victim;
	args[1] = attacker;
	set_task_ex(0.3, "@Task_OnFire", 451, args, 2, SetTask_RepeatTimes, CvarNumBurns);
	set_task(0.7, "@Task_FireScream", victim);
	set_task(5.5, "@Task_StopFire", victim);
}
//----------------------------------------------------------------------------------------------
@Task_OnFire(args[])
{
	new id = args[0];
	new attacker = args[1];

	if (!is_user_alive(id) || pev(id, pev_waterlevel) == 3) {
		gIsBurning[id] = false;
		return;
	}

	if (!gIsBurning[id])
		return;

	new rx, ry, rz, Float:origin[3];
	rx = random_num(-30, 30);
	ry = random_num(-30, 30);
	rz = random_num(-30, 30);

	pev(id, pev_origin, origin);

	// Additive sprite, plays 1 cycle
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_SPRITE); // 17
	write_coord_f(origin[0] + rx); // coord, coord, coord (position)
	write_coord_f(origin[1] + ry);
	write_coord_f(origin[2] + 10 + rz);
	write_short(gSpriteBurning); // short (sprite index)
	write_byte(30); // byte (scale in 0.1's)
	write_byte(200); // byte (brightness)
	message_end();

	// Smoke
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_SMOKE); // 5
	write_coord_f(origin[0] + (rx * 2)); // coord, coord, coord (position)
	write_coord_f(origin[1] + (ry * 2));
	write_coord_f(origin[2] + 100 + (rz * 2));
	write_short(gSpriteSmoke); // short (sprite index)
	write_byte(60); // byte (scale in 0.1's)
	write_byte(15); // byte (framerate)
	message_end();

	sh_extra_damage(id, attacker, CvarBurnDamage, "flame blast", _, SH_DMG_NORM, _, false, origin);
}
//----------------------------------------------------------------------------------------------
@Task_FireScream(id)
{
	emit_sound(id, CHAN_AUTO, gSoundScream, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
}
//----------------------------------------------------------------------------------------------
@Task_StopFire(id)
{
	gIsBurning[id] = false;
	emit_sound(id, CHAN_ITEM, gSoundBurning, VOL_NORM, ATTN_NORM, SND_STOP, PITCH_NORM);
}
//----------------------------------------------------------------------------------------------
