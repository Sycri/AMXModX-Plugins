// Hob Goblin - Extra Nade Damage/Refill Nade

/* CVARS - copy and paste to shconfig.cfg

//Hob Goblin
goblin_level 0
goblin_grenademult 1.5		//Damage multiplier from orginal damage amount
goblin_grenadetimer 10		//How many second delay for new grenade

*/

// v1.17 - JTP - Fixed giving new genades using more reliable event

#include <amxmodx>
#include <amxmisc>
#include <sh_core_main>

#pragma semicolon 1

const AMMOX_HEGRENADE = 12;

// GLOBAL VARIABLES
new gHeroID;
new const gHeroName[]= "Hobgoblin";

new bool:gHasHobgoblin[MAX_PLAYERS + 1];
new bool:gBlockGiveTask[MAX_PLAYERS + 1];

new Float:CvarGrenadeTimer;
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Hobgoblin", SH_VERSION_STR, "{HOJ} Batman/JTP10181");

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = create_cvar("goblin_level", "0", .has_min = true, .min_val = 0.0);
	new pcvarGrenadeMult = create_cvar("goblin_grenademult", "1.5");
	bind_pcvar_float(create_cvar("goblin_grenadetimer", "10", .has_min = true, .min_val = 0.1), CvarGrenadeTimer);

	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Hobgoblin Grenades", "Extra Nade Damage/Refill Nade");
	sh_set_hero_dmgmult(gHeroID, pcvarGrenadeMult, CSW_HEGRENADE);

	// REGISTER EVENTS THIS HERO WILL RESPOND TO!
	register_event_ex("AmmoX", "@Event_AmmoX", RegisterEvent_Single);
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if (gHeroID != heroID)
		return;

	switch (mode) {
		case SH_HERO_ADD: {
			gHasHobgoblin[id] = true;
			@Task_GiveGrenade(id);
		}
		case SH_HERO_DROP: {
			gHasHobgoblin[id] = false;
		}
	}

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED");
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	if (gHasHobgoblin[id]) {
		//Block Ammox nade give task on spawn, since you are given a nade on spawn.
		//This must not be delayed, it must catch before inital ammox called.
		gBlockGiveTask[id] = true;

		@Task_GiveGrenade(id);
	}
}
//----------------------------------------------------------------------------------------------
@Event_AmmoX(id)
{
	//Ammox is used in case other heroes give nades so the task can be removed when nade is refilled.
	if (!sh_is_active() || !is_user_alive(id) || !gHasHobgoblin[id])
		return;

	//new ammoType = read_data(1);
	if (read_data(1) == AMMOX_HEGRENADE) {
		new ammoCount = read_data(2);

		if (ammoCount == 0 && !gBlockGiveTask[id]) {
			//This will be called on spawn as well as when nade is thrown, block this on spawn.
			//Nade was thrown set task to give another.
			set_task(CvarGrenadeTimer, "@Task_GiveGrenade", id);
		} else if (ammoCount > 0) {
			gBlockGiveTask[id] = false;
			remove_task(id);
		}
	}
}
//----------------------------------------------------------------------------------------------
@Task_GiveGrenade(id)
{
	if (sh_is_active() && is_user_alive(id) && gHasHobgoblin[id])
		sh_give_weapon(id, CSW_HEGRENADE);
}
//----------------------------------------------------------------------------------------------
