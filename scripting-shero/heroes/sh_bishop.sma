// BISHOP! - from X-MEN, member of the X.S.E. who is trapped in a past that is no longer his own.
// In truth he can't absorb a projectile weapons energy, but this is cs so what you gonna do.

/*

//Bishop
bishop_level 7
bishop_absorbmult 0.50		//Weapon damage taken X this cvar = damage absorbed [def=0.50]
bishop_damagemult 0.75		//Energy absorbed X this cvar = extra weapon damage dealt [def=0.75]
bishop_blastmult 2.50		//Energy absorbed X this cvar = damage that Energy Blast deals [def=2.50]
bishop_blastradius 150		//Energy Blast damage radius [def=150]

*/

/*
* v1.1 - vittu - 12/28/05
*      - Cleaned up code.
*      - Changed look and color of energy blast and hud message a bit.
*      - Fixed stored absorbed damage to be seperate for each Bishop user.
*      - Fixed Energy Blast to not repeat on user in crosshair.
*
*/

#define DMG_GRENADE (1<<24)

#include <superheromod>
#include <amxmisc>

#pragma semicolon 1

// GLOBAL VARIABLES
new gHeroID;
new const gHeroName[] = "Bishop";

new bool:gHasBishop[MAX_PLAYERS + 1];
new gAbsorbedDamage[MAX_PLAYERS + 1];

new Float:CvarAbsorbMult, Float:CvarDamageMult, Float:CvarBlastMult;
new CvarBlastRadius;

new gSpriteLaser, gSpriteExplosion;
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Bishop", "1.2", "scoutPractice");
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = create_cvar("bishop_level", "7", .has_min = true, .min_val = 0.0);
	bind_pcvar_float(create_cvar("bishop_absorbmult", "0.50"), CvarAbsorbMult);
	bind_pcvar_float(create_cvar("bishop_damagemult", "0.75"), CvarDamageMult);
	bind_pcvar_float(create_cvar("bishop_blastmult", "2.50"), CvarBlastMult);
	bind_pcvar_num(create_cvar("bishop_blastradius", "150"), CvarBlastRadius);
	
	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Absorb Energy", "Absorb Damage and use it with your weapons! Or release all of it to deal even more damage");
	sh_set_hero_bind(gHeroID);
	
	// REGISTER EVENTS THIS HERO WILL RESPOND TO!
	RegisterHamPlayer(Ham_TakeDamage, "@Forward_Player_TakeDamage_Pre");
	RegisterHamPlayer(Ham_TakeDamage, "@Forward_Player_TakeDamage_Post", 1);

	// BISHOP LOOP
	set_task_ex(1.0, "@Task_BishopLoop", _, _, _, SetTask_Repeat);
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	gSpriteLaser = precache_model("sprites/laserbeam.spr");
	gSpriteExplosion = precache_model("sprites/zerogxplode.spr");
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if (gHeroID != heroID)
		return;
	
	gHasBishop[id] = mode ? true : false;
	
	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED");
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	gAbsorbedDamage[id] = 0;
}
//----------------------------------------------------------------------------------------------
public sh_hero_key(id, heroID, key)
{
	if (gHeroID != heroID || sh_is_freezetime() || !is_user_alive(id))
		return;
	
	if (key == SH_KEYDOWN) {
		if (gAbsorbedDamage[id] <= 0) {
			sh_chat_message(id, gHeroID, "You have NO energy left in reserve!");
			sh_sound_deny(id);
			return;
		}
		
		release_energy(id);
	}
}
//----------------------------------------------------------------------------------------------
@Forward_Player_TakeDamage_Pre(victim, inflictor, attacker, Float:damage, damagebits)
{
	if (!sh_is_active() || !is_user_connected(attacker))
		return HAM_IGNORED;
	
	if (!gHasBishop[attacker] || victim == attacker)
		return HAM_IGNORED;
	
	if (!(damagebits & DMG_BULLET) && !(damagebits & DMG_SLASH) && !(damagebits & DMG_GRENADE))
		return HAM_IGNORED;
	
	if (gAbsorbedDamage[attacker] > 0) {
		static Float:energyDamage;
		energyDamage = CvarDamageMult * gAbsorbedDamage[attacker];
		
		if(energyDamage > 0.0) {
			SetHamParamFloat(4, damage += energyDamage);
			return HAM_HANDLED;
		}
	}
	return HAM_IGNORED;
}
//----------------------------------------------------------------------------------------------
@Forward_Player_TakeDamage_Post(victim, inflictor, attacker, Float:damage, damagebits)
{
	if (!sh_is_active() || !is_user_connected(attacker))
		return HAM_IGNORED;
	
	if (!gHasBishop[victim] || victim == attacker)
		return HAM_IGNORED;
	
	static damageAbsorbed;
	damageAbsorbed = floatround(CvarAbsorbMult * damage);
	
	gAbsorbedDamage[victim] += damageAbsorbed;
	client_print(victim, print_center, "You absorbed %d energy points", damageAbsorbed);
	
	new alphanum = clamp(floatround(damage * 2), 40, 200);
	sh_screen_fade(victim, 1.0, 0.5, 255, 90, 102, alphanum);
	return HAM_IGNORED;
}
//----------------------------------------------------------------------------------------------
release_energy(attacker)
{
	new userAim[3], victimOrigin[3];
	new blastDamage = floatround(CvarBlastMult * gAbsorbedDamage[attacker]);
	new blastRadius = CvarBlastRadius;
	new bool:hit = false;
	
	get_user_origin(attacker, userAim, Origin_AimEndEyes);
	
	beam_effects(attacker, userAim);

	static players[MAX_PLAYERS], playerCount, victim, i;
	get_players_ex(players, playerCount, GetPlayers_ExcludeDead);
	
	for (i = 0; i < playerCount; i++) {
		victim = players[i];
		
		if (victim == attacker || (cs_get_user_team(attacker) == cs_get_user_team(victim) && !sh_friendlyfire_on()))
			continue;
		
		get_user_origin(victim, victimOrigin);
		
		if (get_distance(userAim, victimOrigin) <= blastRadius) {
			sh_extra_damage(victim, attacker, blastDamage, "Energy Blast");
			hit = true;
		}
	}

	if (hit)
		sh_chat_message(attacker, gHeroID, "ENERGY BLAST of %d Hit Points", blastDamage);
	else
		sh_chat_message(attacker, gHeroID, "Your Energy Blast MISSED!");

	gAbsorbedDamage[attacker] = 0;
}
//----------------------------------------------------------------------------------------------
beam_effects(index, userAim[3])
{
	new userEyeOrigin[3];
	get_user_origin(index, userEyeOrigin, Origin_Eyes);

	// Energy Beam
	message_begin(MSG_PAS, SVC_TEMPENTITY, userEyeOrigin);
	write_byte(TE_BEAMENTPOINT);
	write_short(index); // start entity
	write_coord(userAim[0]); // end position
	write_coord(userAim[1]);
	write_coord(userAim[2]);
	write_short(gSpriteLaser); // sprite index
	write_byte(0); // starting frame
	write_byte(10); // frame rate in 0.1's
	write_byte(2); // life in 0.1s
	write_byte(80); // line width in 0.1's
	write_byte(9); // noise amplitude in 0.01's
	write_byte(255); // Red
	write_byte(90); // Green
	write_byte(102); // Blue
	write_byte(150); // brightness
	write_byte(100); // scroll speed in 0.1's
	message_end();

	// Explosion (smoke, sound/effects)
	message_begin(MSG_PAS, SVC_TEMPENTITY, userAim);
	write_byte(TE_EXPLOSION);
	write_coord(userAim[0]); // start position
	write_coord(userAim[1]);
	write_coord(userAim[2]);
	write_short(gSpriteExplosion); // sprite index
	write_byte(30); // scale in 0.1's
	write_byte(30); // framerate
	write_byte(8); // flags
	message_end();
}
//----------------------------------------------------------------------------------------------
@Task_BishopLoop()
{
	if (!sh_is_active())
		return;
	
	static players[MAX_PLAYERS], playerCount, player, i, message[128];
	get_players_ex(players, playerCount, GetPlayers_ExcludeDead | GetPlayers_ExcludeBots | GetPlayers_ExcludeHLTV);
	
	for (i = 0; i < playerCount; i++) {
		player = players[i];
		
		if (gHasBishop[player]) {
			formatex(message, charsmax(message), "Total Energy Absorbed: %i", gAbsorbedDamage[player]);
			set_hudmessage(50, 50, 255, -1.0, 0.10, 0, 1.0, 1.0, 0.0, 0.0, -1);
			show_hudmessage(player, message);
		}
	}
}
//----------------------------------------------------------------------------------------------
