// Anubis - King Of The Underworld

/* CVARS - copy and paste to shconfig.cfg

//Anubis
anubis_level 0
anubis_showdamage 1		//(0|1) - hide|show bullet damage..
anubis_showchat 1		//(0|1) - hide|show ghostchat messages..

*/

/*
*   v1.17 - JTP10181
*	- Added ablily to disable the ghostchat like function
*		for servers that already have ghostchat
*/

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <cstrike>
#include <csx>
#include <sh_core_main>

#pragma semicolon 1

// GLOBAL VARIABLES
new gHeroID;
new const gHeroName[] = "Anubis";

new bool:gHasAnubis[MAX_PLAYERS + 1];
new gmsgSayText, gmsgSync1, gmsgSync2;

new CvarShowDamage, CvarShowChat;
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Anubis", SH_VERSION_STR, "AssKicR/JTP10181");

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = create_cvar("anubis_level", "0", .has_min = true, .min_val = 0.0);
	bind_pcvar_num(create_cvar("anubis_showdamage", "1"), CvarShowDamage);
	bind_pcvar_num(create_cvar("anubis_showchat", "1"), CvarShowChat);

	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Dark Notices", "Nothing Is Secret From You. Hear Enemies - See Damage");

	// Say
	register_clcmd("say", "@ClientCommand_Say");
	register_clcmd("say_team", "@ClientCommand_Say");

	// FORWARD
	register_forward(FM_Voice_SetClientListening, "@Forward_Voice_SetClientListening");

	gmsgSayText = get_user_msgid("SayText");
	gmsgSync1 = CreateHudSyncObj();
	gmsgSync2 = CreateHudSyncObj();
}
//----------------------------------------------------------------------------------------------
public client_damage(attacker, victim, damage)
{
	if (!sh_is_active() || !CvarShowDamage)
		return;

	if (victim == attacker)
		return;

	if (!is_user_connected(victim) || !is_user_connected(attacker))
		return;

	if (gHasAnubis[attacker]) {
		set_hudmessage(0, 100, 200, -1.0, 0.55, 2, 0.1, 2.0, 0.02, 0.02, -1);
		ShowSyncHudMsg(attacker, gmsgSync1, "%d", damage);
	}

	if (gHasAnubis[victim]) {
		set_hudmessage(200, 0, 0, -1.0, 0.48, 2, 0.1, 2.0, 0.02, 0.02, -1);
		ShowSyncHudMsg(victim, gmsgSync2, "%d", damage);
	}
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if (gHeroID != heroID)
		return;

	gHasAnubis[id] = mode ? true : false;

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED");
}
//----------------------------------------------------------------------------------------------
@ClientCommand_Say(id)
{
	if (!sh_is_active() || !is_user_connected(id) || !CvarShowChat)
		return;

	static message[191];
	read_argv(1, message, charsmax(message));

	if (message[0] == '^0' || equal(message, "["))
		return;

	static command[9], players[MAX_PLAYERS], playerCount, player;
	static teamname[7], idName[32], sMessage[192];

	read_argv(0, command, charsmax(command));
	new idSayTeam = equal(command, "say_team");

	new idAlive = is_user_alive(id);
	new CsTeams:idTeam = cs_get_user_team(id);

	switch(idTeam) {
		case CS_TEAM_T: copy(teamname, charsmax(teamname), "(T)");
		case CS_TEAM_CT: copy(teamname, charsmax(teamname), "(CT)");
		default: copy(teamname, charsmax(teamname), "(SPEC)");
	}

	get_user_name(id, idName, charsmax(idName));

	formatex(sMessage, charsmax(sMessage), "%c[DN]%s%s%s :  %s^n", 2, idSayTeam ? teamname : "", idAlive ? "*ALIVE*" : "*DEAD*", idName, message);

	// Get all alive players but skip bots
	get_players_ex(players, playerCount, GetPlayers_ExcludeDead | GetPlayers_ExcludeBots | GetPlayers_ExcludeHLTV);

	for (new i = 0; i < playerCount; i++) {
		player = players[i];

		if (!gHasAnubis[player])
			continue;

		if (!idAlive || (idSayTeam && idTeam != cs_get_user_team(player)) ) {
			message_begin(MSG_ONE_UNRELIABLE, gmsgSayText, _, player);
			write_byte(id);
			write_string(sMessage);
			message_end();
		}
	}
}
//----------------------------------------------------------------------------------------------
@Forward_Voice_SetClientListening(receiver, sender, bool:listen)
{
	// Set listen to all only for this client
	if (sh_is_active() && is_user_alive(receiver) && gHasAnubis[receiver]) {
		engfunc(EngFunc_SetClientListening, receiver, sender, true);
		forward_return(FMV_CELL, true);
		return FMRES_SUPERCEDE;
	}

	forward_return(FMV_CELL, listen);

	return FMRES_IGNORED;
}
//----------------------------------------------------------------------------------------------
