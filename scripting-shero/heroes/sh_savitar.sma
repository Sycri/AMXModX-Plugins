// Savitar! - from Marvel, known as God of Motion.

/* CVARS - copy and paste to shconfig.cfg

//Savitar
savitar_level 10
savitar_speed 1000				//Savitar's speed
savitar_minspeed 800			//Minimum speed to generate lightning and become invisible
savitar_alpha 20				//Alpha level when running. 0 = invisible, 255 = fullly visible
savitar_mainred 0				//Custom red of the main lightning when running
savitar_maingreen 0				//Custom green of the main lightning when running
savitar_mainblue 255			//Custom blue of the main lightning when running
savitar_maincolormode 1			//0=Main lightning will be custom 1=Main lightning will be team-based
savitar_mainwidth 10			//Width of the main lightning
savitar_extrared 255			//Custom red of extra lightning when running
savitar_extragreen 215			//Custom green of extra lightning when running
savitar_extrablue 0				//Custom blue of extra lightning when running
savitar_extracolormode 1		//0=Extra lightning will be custom 1=Extra lightning will be team-based
savitar_extrawidth 3			//Width of extra lightning
savitar_forceknife 0			//When running, is Savitar forced to use his knife?

*/

#include <amxmodx>
#include <amxmisc>
#include <fakemeta>
#include <cstrike>
#include <sh_core_main>
#include <sh_core_speed>
#include <sh_core_weapons>

#pragma semicolon 1

const MOVEMENT_BUTTONS = IN_FORWARD | IN_BACK | IN_MOVELEFT | IN_MOVERIGHT | IN_JUMP;

// GLOBAL VARIABLES
new gHeroID;
new const gHeroName[] = "Savitar";

new bool:gHasSavitar[MAX_PLAYERS + 1];
new bool:gIsMoving[MAX_PLAYERS + 1];

new Float:CvarMinSpeed;
new CvarMainTrailRed, CvarMainTrailGreen, CvarMainTrailBlue;
new CvarExtraTrailRed, CvarExtraTrailGreen, CvarExtraTrailBlue;
new CvarMainTrailColorMode, CvarExtraTrailColorMode, CvarAlphaLevel;
new CvarMainTrailWidth, CvarExtraTrailWidth, CvarForceKnife;

new gSpriteLightning;
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Savitar", "1.1", "Sycri (Kristaps08)");
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = create_cvar("savitar_level", "10", .has_min = true, .min_val = 0.0);
	new pcvarSpeed = create_cvar("savitar_speed", "1000");
	bind_pcvar_float(create_cvar("savitar_minspeed", "800", .has_min = true, .min_val = 0.0), CvarMinSpeed);
	bind_pcvar_num(create_cvar("savitar_alpha", "20", .has_min = true, .min_val = 0.0, .has_max = true, .max_val = 255.0), CvarAlphaLevel);
	bind_pcvar_num(create_cvar("savitar_mainred", "0", .has_min = true, .min_val = 0.0, .has_max = true, .max_val = 255.0), CvarMainTrailRed);
	bind_pcvar_num(create_cvar("savitar_maingreen", "0", .has_min = true, .min_val = 0.0, .has_max = true, .max_val = 255.0), CvarMainTrailGreen);
	bind_pcvar_num(create_cvar("savitar_mainblue", "255", .has_min = true, .min_val = 0.0, .has_max = true, .max_val = 255.0), CvarMainTrailBlue);
	bind_pcvar_num(create_cvar("savitar_maincolormode", "1"), CvarMainTrailColorMode);
	bind_pcvar_num(create_cvar("savitar_mainwidth", "10", .has_min = true, .min_val = 0.0), CvarMainTrailWidth);
	bind_pcvar_num(create_cvar("savitar_extrared", "255", .has_min = true, .min_val = 0.0, .has_max = true, .max_val = 255.0), CvarExtraTrailRed);
	bind_pcvar_num(create_cvar("savitar_extragreen", "215", .has_min = true, .min_val = 0.0, .has_max = true, .max_val = 255.0), CvarExtraTrailGreen);
	bind_pcvar_num(create_cvar("savitar_extrablue", "0", .has_min = true, .min_val = 0.0, .has_max = true, .max_val = 255.0), CvarExtraTrailBlue);
	bind_pcvar_num(create_cvar("savitar_extracolormode", "1"), CvarExtraTrailColorMode);
	bind_pcvar_num(create_cvar("savitar_extrawidth", "3", .has_min = true, .min_val = 0.0), CvarExtraTrailWidth);
	bind_pcvar_num(create_cvar("savitar_forceknife", "0"), CvarForceKnife);
	
	// FIRE THE EVENT TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "God of Motion", "Run so insanely fast you can't be seen, while generating lightning behind yourself");
	sh_set_hero_speed(gHeroID, pcvarSpeed);
	
	// CHECK SOME BUTTONS
	set_task_ex(0.1, "@Task_SavitarLoop", _, _, _, SetTask_Repeat);
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	gSpriteLightning = precache_model("sprites/lgtning.spr");
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if (gHeroID != heroID)
		return;
	
	gHasSavitar[id] = mode ? true : false;

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED");
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	clear_savitar(id);
}
//----------------------------------------------------------------------------------------------
public sh_client_death(id)
{
	clear_savitar(id);
}
//----------------------------------------------------------------------------------------------
@Task_SavitarLoop()
{
	static Float:velocity[3];

	static players[MAX_PLAYERS], playerCount, player, i;
	get_players_ex(players, playerCount, GetPlayers_ExcludeDead | GetPlayers_ExcludeHLTV);

	for (i = 0; i < playerCount; i++) {
		player = players[i];

		if (!gHasSavitar[player])
			continue;

		if (!(pev(player, pev_button) & MOVEMENT_BUTTONS)) {
			clear_savitar(player);
			continue;
		}

		pev(player, pev_velocity, velocity);
		if (vector_length(velocity) < CvarMinSpeed) {
			clear_savitar(player);
			continue;
		}

		if (!gIsMoving[player]) {
			gIsMoving[player] = true;
			create_trail(player);
		}

		set_invisibility(player);
		
		if (cs_get_user_weapon(player) != CSW_KNIFE && CvarForceKnife)
			sh_switch_weapon(player, CSW_KNIFE);
	}
}
//----------------------------------------------------------------------------------------------
set_invisibility(index)
{
	static alpha;
	alpha = CvarAlphaLevel;
	
	if(alpha < 50)
		sh_set_rendering(index, 4, 4, 4, alpha, kRenderFxGlowShell, kRenderTransAlpha);
	else
		sh_set_rendering(index, 0, 0, 0, alpha, kRenderFxNone, kRenderTransAlpha);
}
//----------------------------------------------------------------------------------------------
create_trail(index)
{	
	// Main Lightning
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_BEAMFOLLOW);
	write_short(index);
	write_short(gSpriteLightning);
	write_byte(10); // life
	write_byte(CvarMainTrailWidth); // line width
	switch (CvarMainTrailColorMode) {
		case 1: {
			switch (cs_get_user_team(index)) {
				case CS_TEAM_CT: {
					write_byte(0);
					write_byte(0);
					write_byte(255);
				}
				case CS_TEAM_T: {
					write_byte(255);
					write_byte(0);
					write_byte(0);
				}
				default: {
					write_byte(255);
					write_byte(255);
					write_byte(255);
				}
			}
		}
		default: {
			write_byte(CvarMainTrailRed);
			write_byte(CvarMainTrailGreen);
			write_byte(CvarMainTrailBlue);
		}
	}
	write_byte(125); // brightness
	message_end();
	
	// Extra Lightning
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_BEAMFOLLOW);
	write_short(index);
	write_short(gSpriteLightning);
	write_byte(10); // life
	write_byte(CvarExtraTrailWidth); // line width
	switch (CvarExtraTrailColorMode) {
		case 1: {
			switch (cs_get_user_team(index)) {
				case CS_TEAM_CT: {
					write_byte(0);
					write_byte(0);
					write_byte(255);
				}
				case CS_TEAM_T: {
					write_byte(255);
					write_byte(0);
					write_byte(0);
				}
				default: {
					write_byte(255);
					write_byte(255);
					write_byte(255);
				}
			}
		}
		default: {
			write_byte(CvarExtraTrailRed);
			write_byte(CvarExtraTrailGreen);
			write_byte(CvarExtraTrailBlue);
		}
	}
	write_byte(125); // brightness
	message_end();
}
//----------------------------------------------------------------------------------------------
clear_savitar(index)
{
	if (gIsMoving[index]) {
		remove_trail(index);
		sh_set_rendering(index);
		gIsMoving[index] = false;
	}
}
//----------------------------------------------------------------------------------------------
remove_trail(index)
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_KILLBEAM);
	write_short(index);
	message_end();
}
//----------------------------------------------------------------------------------------------
