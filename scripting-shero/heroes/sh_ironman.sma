// IRON MAN! - BASED ON JETPACK By Lazy / Modifications by OLO

/* CVARS - copy and paste to shconfig.cfg

//Iron Man
ironman_level 0
ironman_armor 100		//How much armor does ironman start with?
ironman_timer 0.1		//How often (seconds) to run the loop
ironman_thrust 125		//The upward boost every loop
ironman_maxspeed 400	//Max x and y speeds (while in air)
ironman_xymult 1.05		//Multiplies the current x,y vector when moving
ironman_fuelcost 1		//How much armor does it cost per firing, set 0 to not use armor

*/

#include <amxmodx>
#include <amxmisc>
#include <engine>
#include <cstrike>
#include <sh_core_main>
#include <sh_core_hpap>

#pragma semicolon 1

// GLOBAL VARIABLES
new gHeroID;
new const gHeroName[] = "Iron Man";

new bool:gRegenAllowed[MAX_PLAYERS + 1];
new bool:gJetPackRunning[MAX_PLAYERS + 1];

new Float:CvarTimer, Float:CvarThrust, Float:CvarMaxSpeed, Float:CvarXyMultiplier;
new CvarFuelCost;

new const gSoundJetpack[] = "ambience/flameburst1.wav";
new const gSoundJpStop[] = "debris/beamstart11.wav";
new gSpriteFire;
//----------------------------------------------------------------------------------------------
public plugin_init()
{
	// Plugin Info
	register_plugin("SUPERHERO Iron Man", SH_VERSION_STR, "{HOJ} Batman/JTP10181");

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = create_cvar("ironman_level", "0", .has_min = true, .min_val = 0.0);
	new pcvarArmor = create_cvar("ironman_armor", "100");
	bind_pcvar_float(create_cvar("ironman_timer", "0.1", .has_min = true, .min_val = 0.1), CvarTimer);
	bind_pcvar_float(create_cvar("ironman_thrust", "125", .has_min = true, .min_val = 0.0), CvarThrust);
	bind_pcvar_float(create_cvar("ironman_maxspeed", "400", .has_min = true, .min_val = 0.0), CvarMaxSpeed);
	bind_pcvar_float(create_cvar("ironman_xymult", "1.05", .has_min = true, .min_val = 0.0), CvarXyMultiplier);
	bind_pcvar_num(create_cvar("ironman_fuelcost", "1", .has_min = true, .min_val = 0.0), CvarFuelCost);

	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel);
	sh_set_hero_info(gHeroID, "Rocket Pack", "Rocket Jetpack - use +power key to take off");
	sh_set_hero_bind(gHeroID);
	sh_set_hero_hpap(gHeroID, _, pcvarArmor);
}
//----------------------------------------------------------------------------------------------
public plugin_precache()
{
	precache_sound(gSoundJetpack);
	precache_sound(gSoundJpStop);
	gSpriteFire = precache_model("sprites/fire.spr");
}
//----------------------------------------------------------------------------------------------
public client_disconnected(id)
{
	gJetPackRunning[id] = false;

	// This needs to change to a forward check
	set_user_info(id, "JP", "0");

	gRegenAllowed[id] = false;

	// Yeah don't want any left over residuals
	remove_task(id);
}
//----------------------------------------------------------------------------------------------
public client_connect(id)
{
	gJetPackRunning[id] = false;

	// This needs to change to a forward check
	set_user_info(id, "JP", "0");

	gRegenAllowed[id] = false;

	// Yeah don't want any left over residuals
	remove_task(id);
}
//----------------------------------------------------------------------------------------------
public sh_client_death(victim)
{
	gJetPackRunning[victim] = false;

	// This needs to change to a forward check
	set_user_info(victim, "JP", "0");

	gRegenAllowed[victim] = false;
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id)
{
	gRegenAllowed[id] = false;

	set_task(1.0, "@Task_SpawnDelay", id);
}
//----------------------------------------------------------------------------------------------
@Task_SpawnDelay(id)
{
	//Delay is to allow time for sh armor power to set.
	if (!is_user_alive(id))
		return;

	gRegenAllowed[id] = true;
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode)
{
	if (gHeroID != heroID)
		return;

	// Clear out any stale tasks
	remove_task(id);

	if (mode == SH_HERO_ADD)
		set_task_ex(CvarTimer, "@Task_IronmanLoop", id, _, _, SetTask_Repeat);

	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED");
}
//----------------------------------------------------------------------------------------------
public sh_hero_key(id, heroID, key)
{
	if (gHeroID != heroID)
		return;

	switch (key) {
		case SH_KEYDOWN: {
			if (sh_is_freezetime() || !is_user_alive(id))
				return;

			gJetPackRunning[id] = true;

			// This needs to change to a forward check
			set_user_info(id, "JP", "1");
		}

		case SH_KEYUP: {
			if (!gJetPackRunning[id])
				return;

			gJetPackRunning[id] = false;

			// This needs to change to a forward check
			set_user_info(id, "JP", "0");

			emit_sound(id, CHAN_WEAPON, gSoundJpStop, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
		}
	}
}
//----------------------------------------------------------------------------------------------
@Task_IronmanLoop(id)
{
	if (!sh_is_active() || !is_user_alive(id) || !gRegenAllowed[id])
		return;

	static CsArmorType:armorType;
	static userArmor;
	userArmor = cs_get_user_armor(id, armorType);
	if (userArmor == 0)
		armorType = CS_ARMOR_VESTHELM;

	switch (gJetPackRunning[id]) {
		case false: {
			// Regen armor even if armor is not used for JP fuel
			if (userArmor < sh_get_max_ap(id))
				cs_set_user_armor(id, userArmor + 1, armorType);
		}
		case true: {
			static fuelCost;
			fuelCost = CvarFuelCost;

			// Is armor/fuel being used to run JP?
			if (fuelCost > 0) {
				// If no fuel is available stop JP
				if (userArmor < fuelCost) {
					sh_sound_deny(id);
					gJetPackRunning[id] = false;

					// This needs to change to a forward check
					set_user_info(id, "JP", "0");

					emit_sound(id, CHAN_WEAPON, gSoundJpStop, VOL_NORM, ATTN_NORM, 0, PITCH_NORM);
					client_print(id, print_center, "You ran out of Jetpack Fuel");
					return;
				}

				// Decrement fuel when JP in use
				cs_set_user_armor(id, userArmor - fuelCost, armorType);
			}

			static Float:velocity[3], Float:origin[3];

			entity_get_vector(id, EV_VEC_velocity, velocity);

			// Remove the need to jump to use, give them a small upward lift
			if (entity_get_int(id, EV_INT_flags) & FL_ONGROUND) {
				velocity[2] += 100.0;
				entity_set_vector(id, EV_VEC_velocity, velocity);
			}

			static Float:xyMultiplier, Float:thrust, Float:maxSpeed;
			xyMultiplier = CvarXyMultiplier;
			thrust = CvarThrust;
			maxSpeed = CvarMaxSpeed;

			velocity[0] *= xyMultiplier;
			velocity[1] *= xyMultiplier;
			velocity[2] += thrust;

			if (velocity[0] > maxSpeed)
				velocity[0] = maxSpeed;
			else if (velocity[0] < (maxSpeed * -1.0))
				velocity[0] = maxSpeed * -1.0;

			if (velocity[1] > maxSpeed)
				velocity[1] = maxSpeed;
			else if (velocity[1] < (maxSpeed * -1.0))
				velocity[1] = maxSpeed * -1.0;

			if (velocity[2] > thrust * 2.0)
				velocity[2] = thrust * 2.0;

			entity_set_vector(id, EV_VEC_velocity, velocity);

			entity_get_vector(id, EV_VEC_origin, origin);

			jetpack_fire_effect(origin);

			emit_sound(id, CHAN_WEAPON, gSoundJetpack, VOL_NORM, ATTN_NORM, 0, PITCH_LOW);
		}
	}
}
//----------------------------------------------------------------------------------------------
jetpack_fire_effect(Float:origin[3])
{
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY);
	write_byte(TE_SPRITE); // 17
	write_coord_f(origin[0]);
	write_coord_f(origin[1]);
	write_coord_f(origin[2]);
	write_short(gSpriteFire);
	write_byte(5);
	write_byte(125);
	message_end();
}
//----------------------------------------------------------------------------------------------