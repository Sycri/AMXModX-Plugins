// THOR! from Marvel Comics. Asgardian god, son of Odin, wielder of the enchanted hammer Mjolnir.

/* CVARS - copy and paste to shconfig.cfg

//Thor
thor_level 8
thor_pctofdmg 75		//Percent of Damage Taken that is dealt back at your attacker (def 75%)
thor_cooldown 45		//Amount of time before next available use (def 45)

*/

/*
* v1.2 - vittu - 12/31/05
*      - Cleaned up code.
*      - Changed damage cvar to a percent of damage taken.
*      - Changed sounds.
*      - Changed look of effects.
*
*/

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Thor"
new bool:gHasThor[SH_MAXSLOTS+1]
new gPcvarPctOfDmg, gPcvarCooldown
new gSpriteLightning
//----------------------------------------------------------------------------------------------
public plugin_init() {
	// Plugin Info
	register_plugin("SUPERHERO Thor", "1.3", "TreDizzle")

	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("thor_level", "8")
	gPcvarPctOfDmg = register_cvar("thor_pctofdmg", "75")
	gPcvarCooldown = register_cvar("thor_cooldown", "45")

	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Thunder Bolt", "Return Damage with a Mighty Lightning Bolt from Thor's hammer Mjolnir!")
}
//----------------------------------------------------------------------------------------------
public plugin_precache(){
	precache_sound("ambience/thunder_clap.wav")
	precache_sound("buttons/spark5.wav")
	gSpriteLightning = precache_model("sprites/lgtning.spr")
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) {
	if(gHeroID != heroID) return
	
	gHasThor[id] = mode ? true : false
	
	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id) {
	gPlayerInCooldown[id] = false
}
//----------------------------------------------------------------------------------------------
public client_damage(attacker, victim, damage) {
	if(!sh_is_active() || !is_user_connected(victim)) return
	
	if(!gHasThor[victim] || gPlayerInCooldown[victim]) return
	
	if(is_user_alive(attacker) && !get_user_godmode(attacker) && victim != attacker) {
		emit_sound(victim, CHAN_STATIC, "ambience/thunder_clap.wav", 0.6, ATTN_NORM, 0, PITCH_NORM)
		emit_sound(attacker, CHAN_STATIC, "buttons/spark5.wav", 0.4, ATTN_NORM, 0, PITCH_NORM)
		
		new returnDamage = floatround(damage * get_pcvar_num(gPcvarPctOfDmg) * 0.01)
		if(returnDamage > 20) returnDamage = 20
		sh_extra_damage(attacker, victim, returnDamage, "thunder bolt")
		
		lightning_effect(victim, attacker, returnDamage)
		
		new alphanum = clamp((damage * 2), 40, 200)
		sh_screen_fade(attacker, 1.0, 0.5, 218, 165, 32, alphanum)
		sh_screen_shake(attacker, 10.0, 5.0, 12.0)

		if(is_user_alive(victim)) {
			sh_set_cooldown(victim, get_pcvar_float(gPcvarCooldown))
		}
	}
}
//----------------------------------------------------------------------------------------------
public lightning_effect(id, targetid, lineWidth) {
	if(lineWidth > 70) lineWidth = 70
	
	// Main Lightning
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(8) // TE_BEAMENTS
	write_short(id) // start entity
	write_short(targetid) // entity
	write_short(gSpriteLightning) // model
	write_byte(0) // starting frame
	write_byte(200) // frame rate
	write_byte(15) // life
	write_byte(lineWidth) // line width
	write_byte(6) // noise amplitude
	write_byte(218) // r, g, b
	write_byte(165) // r, g, b
	write_byte(32) // r, g, b
	write_byte(125) // brightness
	write_byte(0) // scroll speed
	message_end()

	// Extra Lightning
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(8) // TE_BEAMENTS
	write_short(id) // start entity
	write_short(targetid) // entity
	write_short(gSpriteLightning) // model
	write_byte(10) // starting frame
	write_byte(200) // frame rate
	write_byte(15) // life
	write_byte(floatround(lineWidth/2.5)) // line width
	write_byte(18) // noise amplitude
	write_byte(218) // r, g, b
	write_byte(165) // r, g, b
	write_byte(32) // r, g, b
	write_byte(125) // brightness
	write_byte(0) // scroll speed
	message_end()
}
//----------------------------------------------------------------------------------------------