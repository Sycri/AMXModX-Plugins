// Transcendent - Evolve to become a higher level of existence

/* CVARS - copy and paste to shconfig.cfg

//Transcendent
transcendent_level 10
transcendent_health 1000			//Transcendent's health. (Def=1000)
transcendent_damagemulti 3.0		//Damage X this cvar = New Damage. (Def=3.0)
transcendent_defensemulti 0.2		//Damage X this cvar = New Damage. (Def=0.2)

*/

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Transcendent"
new bool:gIsTranscendent[SH_MAXSLOTS+1]
new bool:gCZBotRegisterHam
new gPcvarDamageMulti, gPcvarDefenseMulti
new bot_quota
//----------------------------------------------------------------------------------------------
public plugin_init() {
	// Plugin Info
	register_plugin("SUPERHERO Transcendent", "1.0", "Sycri")
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("transcendent_level", "10")
	new pcvarHealth = register_cvar("transcendent_health", "1000")
	gPcvarDamageMulti = register_cvar("transcendent_damagemulti", "3.0")
	gPcvarDefenseMulti = register_cvar("transcendent_defensemulti", "0.2")
	
	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Higher Level Existence", "Massive increase in Health. Material damage is massively increased. Material damage against you is reduced by kinetic energy defense.")
	sh_set_hero_hpap(gHeroID, pcvarHealth)
	
	// REGISTER EVENTS THIS HERO WILL RESPOND TO!
	RegisterHam(Ham_TakeDamage, "player", "fw_Player_TakeDamage_Pre")
	
	bot_quota = get_cvar_pointer("bot_quota")
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) {
	if(gHeroID != heroID) return
	
	gIsTranscendent[id] = mode ? true : false
	
	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public client_putinserver(id) {
	if(id < 1 || id > sh_maxplayers()) return
	
	if(pev(id, pev_flags) & FL_FAKECLIENT && get_pcvar_num(bot_quota) > 0 && !gCZBotRegisterHam) {
		set_task(0.1, "czbotHookHam", id)
	}
}
//----------------------------------------------------------------------------------------------
public czbotHookHam(id) {
	if(gCZBotRegisterHam || !is_user_connected(id)) return
	
	if(pev(id, pev_flags) & FL_FAKECLIENT && get_pcvar_num(bot_quota) > 0) {
		RegisterHamFromEntity(Ham_TakeDamage, id, "fw_Player_TakeDamage_Pre")
		
		gCZBotRegisterHam = true
	}
}
//----------------------------------------------------------------------------------------------
public fw_Player_TakeDamage_Pre(victim, inflictor, attacker, Float:damage, damagebits) {
	if(!sh_is_active() || !is_user_connected(attacker) || victim == attacker) return HAM_IGNORED
	
	if(gIsTranscendent[attacker]) SetHamParamFloat(4, damage *= get_pcvar_float(gPcvarDamageMulti))
	
	if(gIsTranscendent[victim]) SetHamParamFloat(4, damage *= get_pcvar_float(gPcvarDefenseMulti))
	
	return HAM_IGNORED
}
//----------------------------------------------------------------------------------------------