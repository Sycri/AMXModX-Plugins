// VASH THE STAMPEDE! - From the anime Trigun. Vash is a peace loving, donut eating, girl crazy pacifist with a 60 billion double dollar bounty on his head.

/* CVARS - copy and paste to shconfig.cfg

//Vash the Stampede
vash_level 4
vash_deaglemult 2.5		//Damage multiplier for his Deagle
vash_gravity 1.0		//Default 1.0 = normal gravity (0.50 is 50% of normal gravity, ect.)

*/

/*
* v1.4 - vittu - 6/22/05
*      - Code clean up.
*
* v1.3 - vittu - 5/05/05
*      - Fixed code run on clearpowers, now only gets run if user actually had the hero.
*      - Other minor change to code for efficiency.
*
* v1.2 - vittu - 2/02/05
*      - Changed weapon model, old one was for the wrong hand anyway.
*      - Added Evasion to code, a missing hitzone randomly chosen every second.
*      - Set gravity default to none because vash doesn't have low gravity, but
*         left cvar since it was in orginal.
*      - Removed no-reload because he uses a revolver, and gave ammo instead but
*         just enough not affect no-reload heroes.
*
*   Ripped from the hero - Morpheus by RadidEskimo & Freecode.
*   Weapon model by Thin Red Paste & X-convinct, converted by SplinterCell.
*/

//---------- User Changeable Defines --------//


// Comment out to force not using the model, will result in a very small reduction in code/checks
// Note: If you change anything here from default setting you must recompile the plugin
#define USE_WPN_MODEL


//------- Do not edit below this point ------//

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Vash the Stampede"
new bool:gHasVashPower[SH_MAXSLOTS+1]
new bool:gCZBotRegisterHam
new gAllowedHitZones[SH_MAXSLOTS+1]
new bot_quota

#if defined USE_WPN_MODEL
	new const gModel_V_Deagle[] = "models/shmod/vash_deagle.mdl"
	new bool:gModelLoaded
#endif
//----------------------------------------------------------------------------------------------
public plugin_init() {
	// Plugin Info
	register_plugin("SUPERHERO Vash the Stampede", "1.5", "sharky / vittu")
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("vash_level", "4")
	new pcvarDeagleMult = register_cvar("vash_deaglemult", "2.5")
	new pcvarGravity = register_cvar("vash_gravity", "1.0")
	
	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Revolver & Evasion", "Get Vash's .45 Long Colt Revolver (DEAGLE), which does More Damage. Evade by automatically removing random hitzones.")
	sh_set_hero_grav(gHeroID, pcvarGravity)
	sh_set_hero_dmgmult(gHeroID, pcvarDeagleMult, CSW_DEAGLE)
	
	// REGISTER EVENTS THIS HERO WILL RESPOND TO!
	RegisterHam(Ham_TraceAttack, "player", "fw_Player_TraceAttack_Pre")
#if defined USE_WPN_MODEL
	if(gModelLoaded) {
		register_event("CurWeapon", "weapon_change", "be", "1=1")
	}
#endif
	
	// VASH LOOP
	set_task(1.0, "vash_loop", _, _, _, "b")
	
	bot_quota = get_cvar_pointer("bot_quota")
}
//----------------------------------------------------------------------------------------------
public plugin_precache() {
	gModelLoaded = true
	if(file_exists(gModel_V_Deagle)) {
		precache_model(gModel_V_Deagle)
	}
	else {
		sh_debug_message(0, 0, "Aborted loading ^"%s^", file does not exist on server", gModel_V_Deagle)
		gModelLoaded = false
	}
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) {
	if(gHeroID != heroID) return
	
	if(is_user_alive(id)) {
		switch(mode) {
			case SH_HERO_ADD: {
				vash_weapons(id)
				
				if(get_user_weapon(id) == CSW_DEAGLE) switch_model(id)
			}
			case SH_HERO_DROP: {
				if(gHasVashPower[id]) {
					sh_drop_weapon(id, CSW_DEAGLE, true)
					set_hudmessage(200, 0, 0, -1.0, 0.28, 2, 0.02, 4.0, 0.01, 0.1, -1)
					show_hudmessage(id, "Vash - EVASION OFF")
				}
			}
		}
	}
	
	gHasVashPower[id] = mode ? true : false
	gAllowedHitZones[id] = 255
	
	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id) {
	if(!gHasVashPower[id]) return
	
	vash_weapons(id)
}
//----------------------------------------------------------------------------------------------
public sh_client_death(id) {
	if(!sh_is_active() || is_user_alive(id) || !gHasVashPower[id]) return
	
	set_hudmessage(200, 0, 0, -1.0, 0.28, 2, 0.02, 4.0, 0.01, 0.1, -1)
	show_hudmessage(id, "Vash - EVASION OFF")
}
//----------------------------------------------------------------------------------------------
vash_weapons(id) {
	set_hudmessage(200, 0, 0, -1.0, 0.28, 2, 0.02, 4.0, 0.01, 0.1, -1)
	show_hudmessage(id, "Vash - EVASION ON - Removing a random hitzone every second")
	
	sh_give_weapon(id, CSW_DEAGLE)
}
//----------------------------------------------------------------------------------------------
public client_putinserver(id) {
	if(id < 1 || id > sh_maxplayers()) return
	
	if(pev(id, pev_flags) & FL_FAKECLIENT && get_pcvar_num(bot_quota) > 0 && !gCZBotRegisterHam) {
		set_task(0.1, "czbotHookHam", id)
	}
}
//----------------------------------------------------------------------------------------------
public czbotHookHam(id) {
	if(gCZBotRegisterHam || !is_user_connected(id)) return
	
	if(pev(id, pev_flags) & FL_FAKECLIENT && get_pcvar_num(bot_quota) > 0) {
		RegisterHamFromEntity(Ham_TraceAttack, id, "fw_Player_TraceAttack_Pre")
		
		gCZBotRegisterHam = true
	}
}
//----------------------------------------------------------------------------------------------
public fw_Player_TraceAttack_Pre(victim, attacker, Float:damage, Float:direction[3], tracehandle, damagebits) {
	if(!sh_is_active() || !is_user_alive(attacker)) return HAM_IGNORED
	
	if(!gHasVashPower[victim] || victim == attacker) return HAM_IGNORED
	
	if(!(damagebits & DMG_BULLET) && !(damagebits & DMG_SLASH)) return HAM_IGNORED
	
	if(!(gAllowedHitZones[victim] & (1 << get_tr2(tracehandle, TR_iHitgroup)))) return HAM_SUPERCEDE
	
	return HAM_IGNORED
}
//----------------------------------------------------------------------------------------------
#if defined USE_WPN_MODEL
public weapon_change(id) {
	if(!sh_is_active() || !gHasVashPower[id]) return
	
	if(read_data(2) != CSW_DEAGLE) return
	
	switch_model(id)
	
	if(read_data(3) == 0) sh_reload_ammo(id, 2)
}
//----------------------------------------------------------------------------------------------
switch_model(id) {
	if(!sh_is_active() || !is_user_alive(id)) return
	
	if(cs_get_user_shield(id)) return
	
	set_pev(id, pev_viewmodel2, gModel_V_Deagle)
}
#endif
//----------------------------------------------------------------------------------------------
public vash_loop() {
	if(!sh_is_active() || !sh_is_inround()) return
	
	static players[SH_MAXSLOTS], playerCount, player, i
	get_players(players, playerCount, "ah")
	
	for(i = 0; i < playerCount; i++) {
		player = players[i]
		
		if(gHasVashPower[player]) {
			static randomHitZone
			randomHitZone = random_num(1, 7)
			
			switch(randomHitZone) {
				case 1: gAllowedHitZones[player] = 127 //remove right leg hitzone
				case 2: gAllowedHitZones[player] = 191	//remove left leg hitzone
				case 3: gAllowedHitZones[player] = 223	//remove right arm hitzone
				case 4: gAllowedHitZones[player] = 239	//remove left arm hitzone
				case 5: gAllowedHitZones[player] = 247	//remove stomach hitzone
				case 6: gAllowedHitZones[player] = 251	//remove chest hitzone
				case 7: gAllowedHitZones[player] = 253	//remove head hitzone
			}
		}
	}
}
//----------------------------------------------------------------------------------------------