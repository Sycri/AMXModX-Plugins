// Neo! - Right out of the Matrix!

/* CVARS - Copy and paste in shconfig.cfg

//Neo
neo_level 10
neo_health 150			//Def=150
neo_armor 350			//Def=350
neo_gravity 0.5			//Def=0.5
neo_speed 900			//Def=900
neo_flyspeed 1000		//Def=1000
neo_flybeforeftime 1	//Def=1
neo_flytoggle 0			//Def=0

*/

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Neo"
new bool:gHasNeoPowers[SH_MAXSLOTS+1]
new bool:gMorphed[SH_MAXSLOTS+1]
new bool:gIsFlying[SH_MAXSLOTS+1]
new gLastWeapon[SH_MAXSLOTS+1]
new gLastAmmo[SH_MAXSLOTS+1]
new gPcvarFlySpeed, gPcvarFlyBeforeFTime, gPcvarFlyToggle
new const gModelPlayer[] = "models/player/Neo/Neo.mdl"
new const gModelPlayer_Name[] = "Neo"
//----------------------------------------------------------------------------------------------
public plugin_init() {
	// Plugin Info
	register_plugin("SUPERHERO Neo", "1.2", "thechosenone")
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("neo_level", "10")
	new pcvarHealth = register_cvar("neo_health", "150")
	new pcvarArmor = register_cvar("neo_armor", "350")
	new pcvarGravity = register_cvar("neo_gravity", "0.5")
	new pcvarSpeed = register_cvar("neo_speed", "900")
	gPcvarFlySpeed = register_cvar("neo_flyspeed","1000")
	gPcvarFlyBeforeFTime = register_cvar("neo_flybeforeftime","1")
	gPcvarFlyToggle = register_cvar("neo_flytoggle","0")
	
	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "The Chosen One", "Become like Neo - Gain ability to fly, have more health, armor, run faster and jump higher.")
	sh_set_hero_hpap(gHeroID, pcvarHealth, pcvarArmor)
	sh_set_hero_grav(gHeroID, pcvarGravity)
	sh_set_hero_speed(gHeroID, pcvarSpeed)
	sh_set_hero_bind(gHeroID)
	
	// REGISTER EVENTS THIS HERO WILL RESPOND TO!
	register_forward(FM_CmdStart, "fw_CmdStart")
	register_event("CurWeapon", "show_bullets", "be", "1=1", "3>0")
}
//----------------------------------------------------------------------------------------------
public plugin_precache() {
	precache_model(gModelPlayer)
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) {
	if(gHeroID != heroID) return
	
	if(is_user_alive(id)) {
		stop_flying(id)
		
		switch(mode) {
			case SH_HERO_ADD: set_task(1.2, "neo_morph", id)
			case SH_HERO_DROP: {
				if(gHasNeoPowers[id]) neo_unmorph(id)
			}
		}
	}
	
	gHasNeoPowers[id] = mode ? true : false
	
	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id) {
	if(!gHasNeoPowers[id]) return
	
	stop_flying(id)
	
	set_task(1.2, "neo_morph", id)
}
//----------------------------------------------------------------------------------------------
public sh_client_death(id) {
	if(!sh_is_active() || is_user_alive(id) || !gHasNeoPowers[id]) return
	
	stop_flying(id)
	neo_unmorph(id)
}
//----------------------------------------------------------------------------------------------
public neo_morph(id) {
	if(gMorphed[id] || !is_user_alive(id) || !gHasNeoPowers[id]) return
	
	cs_set_user_model(id, gModelPlayer_Name)
	
	set_hudmessage(50, 205, 50, -1.0, 0.40, 2, 0.02, 4.0, 0.01, 0.1, -1)
	show_hudmessage(id, "You are now Neo")
	
	gMorphed[id] = true
}
//----------------------------------------------------------------------------------------------
neo_unmorph(id) {
	if(gMorphed[id] && is_user_connected(id)) {
		if(is_user_alive(id)) {
			set_hudmessage(50, 205, 50, -1.0, 0.40, 2, 0.02, 4.0, 0.01, 0.1, -1)
			show_hudmessage(id, "You are not Neo anymore")
		}
		
		cs_reset_user_model(id)
		
		gMorphed[id] = false
	}
}
//----------------------------------------------------------------------------------------------
public sh_hero_key(id, heroID, key) {
	if(gHeroID != heroID || !is_user_alive(id)) return
	
	switch(key) {
		case SH_KEYDOWN: {
			if(get_pcvar_num(gPcvarFlyToggle) && gIsFlying[id]) {
				stop_flying(id)
				return
			}
			
			start_flying(id)
		}
		case SH_KEYUP: {
			if(get_pcvar_num(gPcvarFlyToggle)) return
			
			stop_flying(id)
		}
	}
}
//----------------------------------------------------------------------------------------------
start_flying(id) {
	if(sh_is_freezetime() && !get_pcvar_num(gPcvarFlyBeforeFTime)) return
	
	set_user_gravity(id, 0.000001)
	
	gIsFlying[id] = true
	set_task(1.0, "user_flight", id+1199, _, _, "b")
} 
//----------------------------------------------------------------------------------------------
stop_flying(id) {
	sh_reset_min_gravity(id)
	sh_reset_max_speed(id)
	
	gIsFlying[id] = false
	remove_task(id+1199)
}
//----------------------------------------------------------------------------------------------
public user_flight(id) {
	id -= 1199
	
	if(!sh_is_active() || !is_user_connected(id)) {
		stop_flying(id)
		return
	}
	
	if(get_user_gravity(id) != 0.000001) set_user_gravity(id, 0.000001)
}
//----------------------------------------------------------------------------------------------
public fw_CmdStart(id, handle) {
	if(!sh_is_active() || !is_user_alive(id) || !gIsFlying[id]) return FMRES_IGNORED
	
	static Float:userVAngle[3], Float:userOrigin[3], Float:userVelocity[3]
	static entity, pressedButtons
	
	pressedButtons = get_uc(handle, UC_Buttons)
	
	if(pressedButtons & IN_FORWARD && pressedButtons & IN_MOVERIGHT && pressedButtons & IN_JUMP) { // FORWARD + MOVERIGHT + JUMP
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = -45.0
		userVAngle[1] -= 45
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_FORWARD && pressedButtons & IN_MOVERIGHT && pressedButtons & IN_DUCK) { // FORWARD + MOVERIGHT + DUCK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 45.0
		userVAngle[1] -= 45
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_FORWARD && pressedButtons & IN_MOVELEFT && pressedButtons & IN_JUMP) { // FORWARD + MOVELEFT + JUMP
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = -45.0
		userVAngle[1] += 45
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_FORWARD && pressedButtons & IN_MOVELEFT && pressedButtons & IN_DUCK) { // FORWARD + MOVELEFT + DUCK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 45.0
		userVAngle[1] += 45
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_JUMP && pressedButtons & IN_MOVERIGHT && pressedButtons & IN_BACK) { // BACK + MOVERIGHT + JUMP
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = -45.0
		userVAngle[1] -= 135
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_BACK && pressedButtons & IN_MOVERIGHT && pressedButtons & IN_DUCK) { // BACK + MOVERIGHT + DUCK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 45.0
		userVAngle[1] -= 135
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_JUMP && pressedButtons & IN_MOVELEFT && pressedButtons & IN_BACK) { // BACK + MOVELEFT + JUMP
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = -45.0
		userVAngle[1] += 135
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_BACK && pressedButtons & IN_MOVELEFT && pressedButtons & IN_DUCK) { // BACK + MOVELEFT + DUCK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 45.0
		userVAngle[1] += 135
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_MOVERIGHT && pressedButtons & IN_FORWARD) { // MOVERIGHT  + FORWARD
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 0.0
		userVAngle[1] -= 45
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_MOVERIGHT && pressedButtons & IN_BACK) { // MOVERIGHT + BACK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 0.0
		userVAngle[1] -= 135
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_MOVELEFT && pressedButtons & IN_FORWARD) { // MOVELEFT + FORWARD
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 0.0
		userVAngle[1] += 45
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_MOVELEFT && pressedButtons & IN_BACK) { // MOVELEFT + BACK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 0.0
		userVAngle[1] += 135
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_FORWARD && pressedButtons & IN_JUMP) { // FORWARD + JUMP
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = -45.0
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_FORWARD && pressedButtons & IN_DUCK) { // FORWARD + DUCK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 45.0 
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_BACK && pressedButtons & IN_JUMP) { // BACK + JUMP
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = -45.0
		userVAngle[1] += 180
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_BACK && pressedButtons & IN_DUCK) { // BACK + DUCK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 45.0
		userVAngle[1] += 180
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	}    
	else if(pressedButtons & IN_MOVERIGHT && pressedButtons & IN_JUMP) { // MOVERIGHT + JUMP
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = -45.0
		userVAngle[1] -= 90
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity) 
	} 
	else if(pressedButtons & IN_MOVERIGHT && pressedButtons & IN_DUCK) { // MOVERIGHT + DUCK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 45.0
		userVAngle[1] -= 90
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_MOVELEFT && pressedButtons & IN_JUMP) { // MOVELEFT + JUMP
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = -45.0
		userVAngle[1] += 90
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_MOVELEFT && pressedButtons & IN_DUCK) { // MOVELEFT + DUCK
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 45.0
		userVAngle[1] += 90
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_FORWARD) { // FORWARD
		velocity_by_aim(id, get_pcvar_num(gPcvarFlySpeed) , userVelocity)
	}
	else if(pressedButtons & IN_BACK) { // BACK
		velocity_by_aim(id, -get_pcvar_num(gPcvarFlySpeed) , userVelocity)
	}
	else if(pressedButtons & IN_DUCK) { // DUCK
		userVelocity[0] = 0.0 
		userVelocity[1] = 0.0 
		userVelocity[2] = float(-get_pcvar_num(gPcvarFlySpeed))
	} 
	else if(pressedButtons & IN_JUMP) { // JUMP
		userVelocity[0] = 0.0
		userVelocity[1] = 0.0
		userVelocity[2] = float(get_pcvar_num(gPcvarFlySpeed))
	} 
	else if(pressedButtons & IN_MOVERIGHT) { // MOVERIGHT
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 0.0
		userVAngle[1] -= 90
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else if(pressedButtons & IN_MOVELEFT) { // MOVELEFT
		pev(id, pev_v_angle, userVAngle)
		pev(id, pev_origin, userOrigin)
		
		entity = engfunc(EngFunc_CreateNamedEntity, engfunc(EngFunc_AllocString, "info_target"))
		if(!entity) return FMRES_IGNORED
		
		userVAngle[0] = 0.0
		userVAngle[1] += 90
		
		set_pev(entity, pev_origin, userOrigin)
		set_pev(entity, pev_v_angle, userVAngle)
		
		velocity_by_aim(entity, get_pcvar_num(gPcvarFlySpeed), userVelocity)
		
		engfunc(EngFunc_RemoveEntity, entity)
	} 
	else { 
		userVelocity[0] = 0.0
		userVelocity[1] = 0.0
		userVelocity[2] = 0.0
	}
	
	set_pev(id, pev_velocity, userVelocity)
	
	if(pev(id, pev_sequence) != 8 && !(pev(id, pev_flags) & FL_ONGROUND) && (userVelocity[0] != 0.0 || userVelocity[1] != 0.0)) {
		set_pev(id, pev_sequence, 8)
	}
	return FMRES_IGNORED
}
//----------------------------------------------------------------------------------------------
public show_bullets(id) {
	if(!sh_is_active()) return
	
	static weapID, ammo, team
	
	weapID = read_data(2)
	ammo = read_data(3)
	team = get_user_team(id)
	
	if(gLastWeapon[id] == 0) gLastWeapon[id] = weapID
	
	if(gLastAmmo[id] > ammo && gLastWeapon[id] == weapID) {
		static origin[3], aimVec[3], velocityVec[3], length, speed
		
		speed = 2400
		
		get_user_origin(id, origin)
		get_user_origin(id, aimVec, 4)
		
		origin[2] -= 6
		
		velocityVec[0] = aimVec[0] - origin[0]
		velocityVec[1] = aimVec[1] - origin[1]
		velocityVec[2] = aimVec[2] - origin[2]
		
		length = sqroot(velocityVec[0] * velocityVec[0] + velocityVec[1] * velocityVec[1] + velocityVec[2] * velocityVec[2])
		
		velocityVec[0] = velocityVec[0] * speed / length
		velocityVec[1] = velocityVec[1] * speed / length
		velocityVec[2] = velocityVec[2] * speed / length
		
		static players[SH_MAXSLOTS], playerCount, player, i
		get_players(players, playerCount, "ch")
		
		for(i = 0; i < playerCount; i++) {
			player = players[i]
			
			if(gHasNeoPowers[player]) {
				draw_bullets(player, team, origin, velocityVec)
			}
		}
	}
	
	gLastAmmo[id] = ammo
	gLastWeapon[id] = weapID
}
//----------------------------------------------------------------------------------------------
draw_bullets(index, indexTeam, origin[3], velocityVec[3]) {
	if(!is_user_connected(index)) return
	
	message_begin(MSG_ONE, SVC_TEMPENTITY, origin, index)
	write_byte(TE_USERTRACER)
	write_coord(origin[0]) // start point
	write_coord(origin[1])
	write_coord(origin[2])
	write_coord(velocityVec[0]) // end point
	write_coord(velocityVec[1])
	write_coord(velocityVec[2])
	write_byte(10) // byte (life * 10)
	switch(indexTeam) {
		case CS_TEAM_CT: write_byte(3)
		case CS_TEAM_T: write_byte(1)
		default: write_byte(2)
	}
	write_byte(15) // byte (length * 10)
	message_end()
}
//----------------------------------------------------------------------------------------------
public client_connect(id) {
	gMorphed[id] = false
}
//----------------------------------------------------------------------------------------------