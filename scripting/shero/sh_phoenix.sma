// PHOENIX! - The fiery bird from Mythology. Rebirth from the ashes of it's burning death.

/* CVARS copy and paste to shconfig.cfg

//Phoenix
phoenix_level 8
phoenix_cooldown 120	//Ammount of time before next available respawn (Default 120)
phoenix_radius 375		//Radius of people affected by blast (Default 375)
phoenix_maxdamage 90	//Maximum damage dealt spread over radius (Default 90)

*/

/*
* v1.1 - vittu - 12/31/05
*      - Code cleaned up.
*      - Fixed respawn issues.
*      - Changed damage to be an actual radius damage.
*      - Added extra sound.
*
*   Hero based on Chucky for respawn, Agent for teleport, and Kamikaze for blowing up.
*/

//---------- User Changeable Defines --------//

#define MAX_UNSTUCK_ATTEMPTS 128

#define START_DISTANCE 32

//------- Do not edit below this point ------//

#include <superheromod>

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Phoenix"
new bool:gHasPhoenix[SH_MAXSLOTS+1]
new CsTeams:gUserTeam[SH_MAXSLOTS+1]
new gRebirthPosition[SH_MAXSLOTS+1][3]
new gPcvarCooldown, gPcvarRadius, gPcvarMaxDamage
new gMsgSync
new gSpriteSmoke, gSpriteRing, gSpriteExplosion
//----------------------------------------------------------------------------------------------
public plugin_init() {
	// Plugin Info
	register_plugin("SUPERHERO Phoenix", "1.2", "[FTW]-S.W.A.T / vittu")
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("phoenix_level", "8")
	gPcvarCooldown = register_cvar("phoenix_cooldown", "120")
	gPcvarRadius = register_cvar("phoenix_radius", "375")
	gPcvarMaxDamage = register_cvar("phoenix_maxdamage", "90")
	
	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Re-Birth", "As the Phoenix you shall Rise Again from your Burning Ashes.")
	
	gMsgSync = CreateHudSyncObj()
}
//----------------------------------------------------------------------------------------------
public plugin_precache() {
	gSpriteSmoke = precache_model("sprites/steam1.spr")
	gSpriteRing = precache_model("sprites/white.spr")
	gSpriteExplosion = precache_model("sprites/explode1.spr")
	precache_sound("ambience/port_suckin1.wav")
	precache_sound("ambience/3dmeagle.wav")
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) {
	if(gHeroID != heroID) return
	
	gHasPhoenix[id] = mode ? true : false
	
	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public sh_client_death(id) {
	if(!sh_is_active() || !sh_is_inround()) return
	
	if(!is_user_connected(id) || is_user_alive(id)) return
	
	if(!gHasPhoenix[id] || gPlayerInCooldown[id]) return
	
	gUserTeam[id] = cs_get_user_team(id)
	
	get_user_origin(id, gRebirthPosition[id])
	gRebirthPosition[id][2] += 8
	
	// Respawn it faster then Grandmaster, let this power be used before Grandmaster's
	// Never set higher than 1.9 or lower than 0.5
	set_task(0.6, "task_phoenix_rebirth", id)
}
//----------------------------------------------------------------------------------------------
public task_phoenix_rebirth(id) {
	if(!is_user_connected(id) || is_user_alive(id)) return
	
	if(!sh_is_inround() && sh_is_freezetime()) return
	
	if(gUserTeam[id] != cs_get_user_team(id)) return
	
	emit_sound(id, CHAN_STATIC, "ambience/port_suckin1.wav", 1.0, ATTN_NORM, 0, PITCH_NORM)
	sh_chat_message(id, gHeroID, "You used the Phoenix power to Rise Again from the Ashes!")
	
	ExecuteHamB(Ham_CS_RoundRespawn, id)
	
	sh_set_cooldown(id, get_pcvar_float(gPcvarCooldown))
	
	emit_sound(id, CHAN_STATIC, "ambience/3dmeagle.wav", 0.6, ATTN_NORM, 0, PITCH_NORM)
	
	sh_set_rendering(id, 248, 20, 25, 16, kRenderFxGlowShell)
	set_task(3.0, "task_unglow", id)
	
	set_user_health(id, sh_get_max_hp(id) / 2)
	phoenix_teleport(id)
}
//----------------------------------------------------------------------------------------------
public task_unglow(id) {
	sh_set_rendering(id)
}
//----------------------------------------------------------------------------------------------
public sh_round_end() {
	if(!sh_is_active()) return
	
	for(new id = 1; id <= sh_maxplayers(); id++) {
		if(!is_user_connected(id) || !gHasPhoenix[id])
			continue
		
		remove_task(id)
		gPlayerInCooldown[id] = false
	}
}
//----------------------------------------------------------------------------------------------
phoenix_teleport(id) {
	set_user_origin(id, gRebirthPosition[id])
	
	if(is_user_stuck(id)) {
		user_unstuck(id, START_DISTANCE, MAX_UNSTUCK_ATTEMPTS)
	}
	
	new origin[3]
	get_user_origin(id, origin)
	
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(11) // TE_TELEPORT
	write_coord(origin[0]) // start position
	write_coord(origin[1])
	write_coord(origin[2])
	message_end()
	
	new Float:velocity[3]
	pev(id, pev_velocity, velocity)
	
	if(velocity[0] == 0.0 && velocity[1] == 0.0) {
		velocity[0] += 20.0
		velocity[2] += 100.0
		set_pev(id, pev_velocity, velocity)
	}
	
	rebirth_explosion(id, origin)
}
//----------------------------------------------------------------------------------------------
rebirth_explosion(id, userOrigin[3]) {
	new Float:dmgRatio, damage, distanceBetween
	new dmgRadius = get_pcvar_num(gPcvarRadius)
	new maxDamage = get_pcvar_num(gPcvarMaxDamage)
	new FFOn = sh_friendlyfire_on()
	
	new name[32]
	get_user_name(id, name, charsmax(name))
	
	new playerOrigin[3]
	
	explosionEffect(userOrigin, dmgRadius)
	
	static players[SH_MAXSLOTS], playerCount, player, i
	get_players(players, playerCount, "ah")
	
	for(i = 0; i < playerCount; i++) {
		player = players[i]
		
		if((cs_get_user_team(id) != cs_get_user_team(player) || FFOn) && player != id) {
			get_user_origin(player, playerOrigin)
			distanceBetween = get_distance(userOrigin, playerOrigin)
			
			if(distanceBetween < dmgRadius) {
				set_hudmessage(248, 20, 25, 0.05, 0.65, 2, 0.02, 3.0, 0.01, 0.1, -1)
				ShowSyncHudMsg(player, gMsgSync, "%s was Re-Born using the power of the Phoenix!", name)
				
				dmgRatio = float(distanceBetween) / float(dmgRadius)
				damage = maxDamage - floatround(maxDamage * dmgRatio)
				sh_extra_damage(player, id, damage, "Phoenix Re-Birth")
			}
		}
	}
}
//----------------------------------------------------------------------------------------------
explosionEffect(vec1[3], dmgRadius) {
	// Ring
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY, vec1)
	write_byte(TE_BEAMCYLINDER)
	write_coord(vec1[0]) // center position
	write_coord(vec1[1])
	write_coord(vec1[2] + 10)
	write_coord(vec1[0]) // axis and radius
	write_coord(vec1[1])
	write_coord(vec1[2] + floatround(dmgRadius*3.5))
	write_short(gSpriteRing) // sprite index
	write_byte(0) // starting frame
	write_byte(0) // frame rate in 0.1's
	write_byte(2) // life in 0.1's
	write_byte(20) // line width in 0.1's
	write_byte(0) // noise amplitude in 0.01's
	write_byte(248) // color
	write_byte(20)
	write_byte(25)
	write_byte(255) // brightness
	write_byte(0) // scroll speed in 0.1's
	message_end()
	
	// Explosion2
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_EXPLOSION2)
	write_coord(vec1[0]) // start position
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_byte(188) // starting color
	write_byte(10) // num colors
	message_end()
	
	// Explosion
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY, vec1)
	write_byte(TE_EXPLOSION)
	write_coord(vec1[0]) // start position 
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_short(gSpriteExplosion) // sprite index
	write_byte(dmgRadius/9) // scale in 0.1's 
	write_byte(10) // framerate
	write_byte(0) // flags
	message_end()
	
	// Smoke
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY, vec1)
	write_byte(TE_SMOKE)
	write_coord(vec1[0]) // start position
	write_coord(vec1[1])
	write_coord(vec1[2])
	write_short(gSpriteSmoke) // sprite index
	write_byte(dmgRadius/14) // scale in 0.1's
	write_byte(10) // framerate
	message_end()
}
//----------------------------------------------------------------------------------------------
is_user_stuck(index) {
	if(!is_user_alive(index)) return -1
	
	static Float:originF[3]
	pev(index, pev_origin, originF)
	
	engfunc(EngFunc_TraceHull, originF, originF, 0, (pev(index, pev_flags) & FL_DUCKING) ? HULL_HEAD : HULL_HUMAN, index, 0)
	
	if(get_tr2(0, TR_StartSolid) || get_tr2(0, TR_AllSolid) || !get_tr2(0, TR_InOpen)) return true
	
	return false
}
//----------------------------------------------------------------------------------------------
user_unstuck(index, startDistance, maxAttempts) {
	if(!is_user_alive(index)) return -1
	
	static Float:oldOriginF[3], Float:newOriginF[3]
	static attempts, distance
	
	pev(index, pev_origin, oldOriginF)
	
	distance = startDistance
	
	while(distance < 1000) {
		attempts = maxAttempts
		
		while(attempts--) {
			newOriginF[0] = random_float(oldOriginF[0] - distance, oldOriginF[0] + distance)
			newOriginF[1] = random_float(oldOriginF[1] - distance, oldOriginF[1] + distance)
			newOriginF[2] = random_float(oldOriginF[2] - distance, oldOriginF[2] + distance)
			
			engfunc(EngFunc_TraceHull, newOriginF, newOriginF, 0, (pev(index, pev_flags) & FL_DUCKING) ? HULL_HEAD : HULL_HUMAN, index, 0)
			
			if(get_tr2(0, TR_InOpen) && !get_tr2(0, TR_AllSolid) && !get_tr2 (0, TR_StartSolid)) {
				engfunc(EngFunc_SetOrigin, index, newOriginF)
				return true
			}
		}
		
		distance += startDistance
	}
	
	return false
}
//----------------------------------------------------------------------------------------------
