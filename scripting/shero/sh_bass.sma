// BASS! ?

/* CVARS - copy and paste to shconfig.cfg

//Bass
bass_level 10
bass_health 200				//Default 200
bass_armor 200				//Default 200
bass_speed 280				//Default 280
bass_gravity 0.40			//Default 0.40
bass_laser_ammo 1000		//Total # of shots given each round, -1 is unlimited (Default 1000)
bass_laser_burndecals 1		//Show the burn decals on the walls
bass_cooldown 0.0			//Cooldown timer between laser use
bass_multishot 0.1			//Delay for multishots on holding key down, set to -1 for only 1 shot per keydown (Default 0.1)

*/

/*
* v1.3 - vittu - 7/29/05
*      - Fixed bug with cooldown, if one is set.
*
* v1.2 - MTS Steel DrAgoN - 6/23/05
*      - Cleaned up code.
*
*      - vittu - 6/23/05
*      - Made further changes.
*      - Added defines for easy Beam color changes.
*      - Added code for unlimited laser shots as an option.
*
*   Hero is a rip of Cyclops with added HP/AP/Speed/Gravity.
*   From original code "Based on dr.doom Hero but added gravity.."
*/

#include <superheromod>

// Damage Variables
new const lDamage[7] = {
	500,	//head
	250,	//chest
	250,	//stomach
	100,	//left arm
	100,	//right arm
	100,	//left leg
	100		//right leg
}

//Colors To Pick From ***DO NOT MODIFY***
#define CUSTOM		0
#define RED		1
#define GREEN		2
#define BLUE		3
#define LTBLUE		4
#define YELLOW		5
#define PURPLE		6
#define ORANGE		7

//Color Settings ***CHANGE COLOR HERE***
#define BEAM_COLOR CUSTOM	// Set beam color here, use color names from above (Default GREEN)
#define BEAM_ALPHA 200		// alpha value, visibility from 0-255 (Default 200)

//Color definitions
new BeamColors[8][3] = {
	{150, 150, 150},	// Custom, edit this one for a custom rgb value
	{255, 0, 0},		// Red
	{0, 255, 0},		// Green
	{0, 0, 255},		// Blue
	{0, 255, 255},		// Light Blue
	{255, 255, 0},		// Yellow
	{255, 0, 255},		// Purple
	{255, 128, 0}		// Orange
}

// GLOBAL VARIABLES
new gHeroID
new const gHeroName[] = "Bass"
new bool:gUsingLaser[SH_MAXSLOTS+1]
new gLaserShots[SH_MAXSLOTS+1]
new gPcvarLaserAmmo, gPcvarLaserBurnDecals, gPcvarCooldown, gPcvarMultiShot
new gBurnDecal
new const gSoundLaser[] = "weapons/electro5.wav"
new const gSoundHit[] = "weapons/xbow_hitbod2.wav"
new gSpriteSmoke, gSpriteLaser
//----------------------------------------------------------------------------------------------
public plugin_init() {
	// Plugin Info
	register_plugin("SUPERHERO Bass", "1.4", "Op")
	
	// DO NOT EDIT THIS FILE TO CHANGE CVARS, USE THE SHCONFIG.CFG
	new pcvarLevel = register_cvar("bass_level", "10")
	new pcvarHealth = register_cvar("bass_health", "200")
	new pcvarArmor = register_cvar("bass_armor", "200")
	new pcvarSpeed = register_cvar("bass_speed", "280")
	new pcvarGravity = register_cvar("bass_gravity", "0.40")
	gPcvarLaserAmmo = register_cvar("bass_laser_ammo", "1000")
	gPcvarLaserBurnDecals = register_cvar("bass_laser_burndecals", "1")
	gPcvarCooldown = register_cvar("bass_cooldown", "0.0")
	gPcvarMultiShot = register_cvar("bass_multishot", "0.1")

	// FIRE THE EVENTS TO CREATE THIS SUPERHERO!
	gHeroID = sh_create_hero(gHeroName, pcvarLevel)
	sh_set_hero_info(gHeroID, "Uber Energy Beam", "Press the +power key to fire your beam cannon!")
	sh_set_hero_hpap(gHeroID, pcvarHealth, pcvarArmor)
	sh_set_hero_speed(gHeroID, pcvarSpeed)
	sh_set_hero_grav(gHeroID, pcvarGravity)
	sh_set_hero_bind(gHeroID)
	
	gBurnDecal = engfunc(EngFunc_DecalIndex, "{bigshot5")
}
//----------------------------------------------------------------------------------------------
public plugin_precache() {
	precache_sound(gSoundLaser)
	precache_sound(gSoundHit)
	gSpriteSmoke = precache_model("sprites/steam1.spr")
	gSpriteLaser = precache_model("sprites/laserbeam.spr")
}
//----------------------------------------------------------------------------------------------
public sh_hero_init(id, heroID, mode) {
	if(gHeroID != heroID) return
	
	if(mode == SH_HERO_ADD) {
		gPlayerInCooldown[id] = false
		gLaserShots[id] = get_pcvar_num(gPcvarLaserAmmo)
	}
	
	sh_debug_message(id, 1, "%s %s", gHeroName, mode ? "ADDED" : "DROPPED")
}
//----------------------------------------------------------------------------------------------
public sh_client_spawn(id) {
	remove_task(id)
	gUsingLaser[id] = false
	
	gLaserShots[id] = get_pcvar_num(gPcvarLaserAmmo)
	
	gPlayerInCooldown[id] = false
}
//----------------------------------------------------------------------------------------------
public sh_client_death(id) {
	if(!sh_is_active() || is_user_alive(id) || !is_user_connected(id)) return
	
	remove_task(id)
}
//----------------------------------------------------------------------------------------------
public sh_hero_key(id, heroID, key) {
	if(gHeroID != heroID) return
	
	switch(key) {
		case SH_KEYDOWN: {
			if(sh_is_freezetime() || !is_user_alive(id)) return
			
			if(gLaserShots[id] == 0) {
				client_print(id, print_center, "No Bass Shots Left")
				sh_sound_deny(id)
				return
			}
			
			if(gPlayerInCooldown[id]) {
				sh_sound_deny(id)
				return
			}
			
			gUsingLaser[id] = true
			
			fire_laser(id)
			
			new Float:delayTime = get_pcvar_float(gPcvarMultiShot)
			if(delayTime >= 0.1) {
				set_task(delayTime, "fire_laser", id, _, _, "b")
			}
		}
		case SH_KEYUP: {
			remove_task(id)
			
			if(sh_is_freezetime() || gPlayerInCooldown[id] || !gUsingLaser[id]) return
			
			new Float:seconds = get_pcvar_float(gPcvarCooldown)
			if(seconds > 0.0) sh_set_cooldown(id, seconds)
			
			gUsingLaser[id] = false
		}
	}
}
//----------------------------------------------------------------------------------------------
public fire_laser(id) {
	if(!is_user_alive(id)) return
	
	new lasershots = gLaserShots[id]
	
	if(lasershots == 0) {
		client_print(id, print_center, "No Bass Shots Left")
		sh_sound_deny(id)
		remove_task(id)
		return
	}
	
	if(lasershots > 0) gLaserShots[id] = --lasershots
	
	if(0 < lasershots <= 10) client_print(id, print_center, "Warning: %d Bass Shot%s Left", lasershots, lasershots == 1 ? "" : "s")

	new aimVec[3], targetId, targetBody
	
	get_user_origin(id, aimVec, 3)
	laser_effects(id, aimVec)
	
	get_user_aiming(id, targetId, targetBody)
	
	if(is_user_alive(targetId) && (cs_get_user_team(id) != cs_get_user_team(targetId) || sh_friendlyfire_on())) {
		emit_sound(targetId, CHAN_BODY, gSoundHit, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
		
		sh_extra_damage(targetId, id, lDamage[targetBody-1], "Bass Energy Beam", targetBody == 1 ? 1 : 0, SH_DMG_NORM, true)
	}
}
//----------------------------------------------------------------------------------------------
laser_effects(id, aimVec[3]) {
	emit_sound(id, CHAN_ITEM, gSoundLaser, VOL_NORM, ATTN_NORM, 0, PITCH_NORM)
	
	new origin[3]
	get_user_origin(id, origin, 1)
	
	new colornum = BEAM_COLOR
	new colors[3]
	
	if(colornum < 0 || colornum >= 8) {
		//If invalid value set it to default green
		colornum = 2
	}
	colors = BeamColors[colornum]
	
	// Dynamic light, effect world, minor entity effect
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_DLIGHT) //27
	write_coord(origin[0]) //pos
	write_coord(origin[1])
	write_coord(origin[2])
	write_byte(10)
	write_byte(colors[0]) // r, g, b
	write_byte(colors[1]) // r, g, b
	write_byte(colors[2]) // r, g, b
	write_byte(2) // life
	write_byte(1) // decay
	message_end()
	
	// Beam effect between two points
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_BEAMPOINTS)	// 0
	write_coord(origin[0])
	write_coord(origin[1])
	write_coord(origin[2])
	write_coord(aimVec[0])
	write_coord(aimVec[1])
	write_coord(aimVec[2])
	write_short(gSpriteLaser)
	write_byte(1) // framestart
	write_byte(5) // framerate
	write_byte(2) // life
	write_byte(60) // width
	write_byte(0) // noise
	write_byte(colors[0]) // r, g, b
	write_byte(colors[1]) // r, g, b
	write_byte(colors[2]) // r, g, b
	write_byte(BEAM_ALPHA) // brightness
	write_byte(200) // speed
	message_end()
	
	// Sparks
	message_begin(MSG_PVS, SVC_TEMPENTITY)
	write_byte(TE_SPARKS) // 9
	write_coord(aimVec[0])
	write_coord(aimVec[1])
	write_coord(aimVec[2])
	message_end()
	
	// Smoke
	message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
	write_byte(TE_SMOKE) // 5
	write_coord(aimVec[0])
	write_coord(aimVec[1])
	write_coord(aimVec[2])
	write_short(gSpriteSmoke)
	write_byte(22) // 10
	write_byte(10) // 10
	message_end()

	if(get_pcvar_num(gPcvarLaserBurnDecals)) {
		// decal and ricochet sound
		message_begin(MSG_BROADCAST, SVC_TEMPENTITY)
		write_byte(TE_GUNSHOTDECAL) // 109
		write_coord(aimVec[0]) //pos
		write_coord(aimVec[1])
		write_coord(aimVec[2])
		write_short(0) // I have no idea what thats supposed to be
		write_byte(gBurnDecal + random_num(0, 4)) //decal
		message_end()
	}
}
//----------------------------------------------------------------------------------------------
public client_disconnect(id) {
	remove_task(id)
}
//----------------------------------------------------------------------------------------------
public client_connect(id) {
	remove_task(id)
}
//----------------------------------------------------------------------------------------------